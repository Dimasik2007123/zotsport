name: CI/CD
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose --version
      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
            username: ${{secrets.DOCKER_USERNAME}}
            password: ${{secrets.DOCKER_PASSWORD}}
      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: frontend/Dockerfile
          push: true
          tags: ${{secrets.DOCKER_USERNAME}}/zotsport-frontend:latest
      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker-backend/Dockerfile
          push: true
          tags: ${{secrets.DOCKER_USERNAME}}/zotsport-backend:latest
      - name: Build and push sqlite
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker-sqlite/Dockerfile
          push: true
          tags: ${{secrets.DOCKER_USERNAME}}/zotsport-sqlite:latest
      - name: Build and push proxy
        uses: docker/build-push-action@v6
        with:
          context: .
          file: proxy/Dockerfile
          push: true
          tags: ${{secrets.DOCKER_USERNAME}}/zotsport-proxy:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Зависимость от job build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      - name: Run deployment tests
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          docker-compose up -d
          sleep 10
          for service in backend frontend proxy; do
            if [ -z "$(docker ps -q -f name=zotsport_${service}_1)" ]; then
              echo "Error: ${service} container is not running"
              docker-compose logs ${service}
              docker-compose down --volumes
              exit 1
            fi
          done
          # Check proxy HTTP endpoint
          curl -f http://localhost:80 || {
            echo "Error: Proxy HTTP endpoint not accessible"
            docker-compose logs proxy
            docker-compose down --volumes
            exit 1
          }
          # Clean up
          docker-compose down --volumes
